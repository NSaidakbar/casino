//—Å–ø–µ—Ü–∏–ª—å–Ω–æ –¥–ª—è Buratinopol
var txnId = require('./txnId');
const fs = require("fs")

const mongo = require('mongoose');
mongo.connect('mongodb://127.0.0.1/base');

const ADMINS = [id];

var qiwistr = fs.readFileSync("./Bqiwi.txt", { encoding: "utf8" })
console.log("QIWI loaded: " + qiwistr)


process.env.TZ = 'Moscow/Europe';

var User = mongo.model('User', {
	id: Number,
	buybalance: Number,
	outbalance: Number,
	username: String,
	name: String,
	fc: Number,
	ref: Number,
	regDate: String,
	trees: Array,
	deposit: Number,
	payout: Number,
	menu: String,
	lastCollect: Number,
	ban: Boolean,
	refCount: Number,
	wb_profits: Number,
	totalEarn: Number,
	not: Boolean,
	data: String,
	bank: Number,
	game_payin: Number,
	game_payout: Number,
	game_limit: Number,
	game_bet: Number,
	gameplay: Number,
	win: Number,
	lose: Number,
	last_bonus_day: Number,
	bonuscount: Number,
	spinsToday: Number,
});

const Config = mongo.model("configs", { parameter: String, value: Number, description: String })

const BestUser = mongo.model('BestUsers', { id: Number, username: String, id1: Number })
const FUser = mongo.model('FUsers', { id: Number, username: String, id1: Number })
const BigUser = mongo.model('BigUsers', { id: Number, username: String, id1: Number })

function addBal(user_id, sum) { User.findOneAndUpdate({ id: user_id }, { $inc: { buybalance: sum } }, {}).then((e) => { }) }
function addoutBal(user_id, sum) { User.findOneAndUpdate({ id: user_id }, { $inc: { outbalance: sum } }, {}).then((e) => { }) }

var Gamestat = mongo.model('Gamestat', {
	id: Number,
	statusgame: String
});

const Ticket = mongo.model('Ticket', {
	id: Number,
	amount: Number,
	wallet: String
})

const Deposit = mongo.model('Deposits', { 
	creator_id: Number, 
	amount: Number, 
	time: Number, 
	txnId: String 
})

const Start = [
	["üé≤ –ò–≥—Ä—ã", "üñ• –ü—Ä–æ—Ñ–∏–ª—å"],
	["üë®‚Äçüíª –ü–∞—Ä—Ç–Ω–µ—Ä—ã", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
];

const Cancel = [
	["üö´ –û—Ç–º–µ–Ω–∞"]
];

const RM_admin = {
	inline_keyboard: [
		[{ text: "‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data: "admin_mm" }, { text: "üîé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data: "admin_u" }],
		[{ text: "üìÆ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data: "admin_w" }, { text: "üõ† –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data: "a_voucherpromo" }],
	//	[{ text: "üóí –ß–µ–∫", callback_data: "a_voucher" }],
		[{ text: "‚úèÔ∏è –ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é", callback_data: "admin_b" }, { text: "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞", callback_data: "admin_parametr" }],
		//[{ text: "üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data: "admin_finanses" }, { text: "üé≤ –ò–≥—Ä—ã", callback_data: "admin_games" }],
		[{ text: "üé≤ –ò–≥—Ä—ã", callback_data: "admin_games" }],
	]
}

const RM_admin_return = { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }],] }
const Promo = mongo.model("Promo", { id: String, sum: Number, activated: Boolean })
function generateID(res) { var text = ""; var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; for (var i = 0; i < res; i++)text += possible.charAt(Math.floor(Math.random() * possible.length)); return text }

const RM_promo = {
	inline_keyboard: [
		[{ text: "–î–ª—è –ø–æ–∫—É–ø–æ–∫", callback_data: "voucherbuy" }],
		[{ text: "–î–ª—è –≤—ã–≤–æ–¥–∞", callback_data: "voucherout" }],
	]
}

const RM_mm1 = {
	inline_keyboard: [
		[{ text: "‚èπ –°—Ç–æ–ø", callback_data: "admin_mm_stop" }],
		[{ text: "‚è∏ –ü–∞—É–∑–∞", callback_data: "admin_mm_pause" }],
	]
}

const RM_mm2 = {
	inline_keyboard: [
		[{ text: "‚èπ –°—Ç–æ–ø", callback_data: "admin_mm_stop" }],
		[{ text: "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: "admin_mm_play" }],
	]
}

const { Qiwi } = require('node-qiwi-api');
const qiwi = new Qiwi(qiwistr.split(" ")[1]);

const Telegram = require('node-telegram-bot-api');
const bot = new Telegram('1111', { polling: true });

bot.getMe().then(r => console.log(r))

bot.on('text', async (message) => {
	message.send = (text, params) => bot.sendMessage(message.chat.id, text, params);
	let $menu = [];
	var uid = message.from.id
	var text = message.text
	let dt = new Date
	console.log("[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + uid + " –æ—Ç–ø—Ä–∞–≤–∏–ª: " + text)

	Start.map((x) => $menu.push(x));
	if (ADMINS.find((x) => x == message.from.id)) $menu.push(["üîù –ê–¥–º–∏–Ω–∫–∞"]);

	if (message.text) {
		if (message.text.startsWith('/start') || message.text == 'üîô –ù–∞–∑–∞–¥') {
			let $user = await User.findOne({ id: message.from.id });
			if (!$user) {
				let schema = {
					id: message.from.id,
					buybalance: 0,
					outbalance: 0,
					username: message.from.username,
					name: message.from.first_name,
					fc: 0,
					ref: 0,
					regDate: `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}`,
					deposit: 0,
					payout: 0,
					menu: "",
					ban: false,
					refCount: 0,
					not: false,
					data: "",
					bank: 0,
					game_payin: 0,
					game_payout: 0,
					gameplay: 0,
					win: 0,
					lose: 0,
					last_bonus_day: 0,
					bonuscount: 0
				}

				let reffer = Number(message.text.split('/start ')[1]);

				if (reffer) {
					let $reffer = await User.findOne({ id: reffer });
					if ($reffer) {
						schema.ref = $reffer.id;
				//		await $reffer.inc('buybalance', 0.25);
						await $reffer.inc('refCount', 1);
					//	bot.sendMessage($reffer.id, `üîî –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ <a href="tg://user?id=${message.from.id}">–ø–∞—Ä—Ç–Ω—ë—Ä–∞</a> –∏ –ø–æ–ª—É—á–∏–ª–∏ 0.25‚ÇΩ`, { parse_mode: "HTML" });
					bot.sendMessage($reffer.id, `üë®‚Äçüíª –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ <a href="tg://user?id=${message.from.id}">—Ä–µ—Ñ–µ—Ä–∞–ª–∞</a>!\nüí∞ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>${config.refbonus}‚ÇΩ</b> –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞`, { parse_mode: "HTML" });
					}
				}

				let user = new User(schema);
				await user.save();
			}
			return message.send(`
‚úåÔ∏è <b>–ü—Ä–∏–≤–µ—Ç, ${message.from.first_name}</b>`, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	message.user = await User.findOne({ id: message.from.id });
	if (!message.user) return message.send(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–∞–ø–∏—à–∏—Ç–µ /start`);
	if (message.user.ban) return
	if (!message.user.name || message.user.name != message.from.first_name)
		await User.findOneAndUpdate({ id: message.from.id }, { name: message.from.first_name })

	if (state[uid] == 7770 && ADMINS.indexOf(message.from.id) !== -1 && text != "0") {
		state[uid] = undefined
		bot.sendMessage(uid, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!").then((e) => {
			if (text.split("#").length == 4) {
				var btn_text = text.split("#")[1].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
				var btn_link = text.split("#")[2].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
				text = text.split("#")[0]
				mm_t(text, e.message_id, e.chat.id, true, btn_text, btn_link, 100)
			}
			else mm_t(text, e.message_id, e.chat.id, false, false, false, 100)
		})
	}

	if ((await bot.getChatMember("@playgame_info", uid)).status == "left") {
		return message.send(`‚ùï <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª:</b>`, { parse_mode: "html", reply_markup: { inline_keyboard: [[{ text: "üí° –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞", url: "https://t.me/playgame_info" }]] } });
	}  

	if (state[uid] == 7771 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		text = Number(text.replace("%", ""))
		await User.findOneAndUpdate({ id: 0 }, { deposit: text })
		return message.send(`–ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –≤ ${text}% —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`, { reply_markup: RM_admin_return });
	}
	if (message.text.startsWith('/setqiwi') && ADMINS.indexOf(message.from.id) !== -1) {
		var str = message.text.split(' ');
		var number = str[1]
		var token = str[2]
		if (number.indexOf("+") == -1) return message.send('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å +');
		if (token.length < 10) return message.send('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω');
		fs.writeFileSync("./Bqiwi.txt", number + " " + token, { encoding: "utf8" })
		message.send('QIWI –æ–±–Ω–æ–≤–ª—ë–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
		setTimeout(() => { process.exit(0) }, 333);
	}

	if (state[uid] == 7772 && ADMINS.indexOf(message.from.id) !== -1 && text != "0") {
		state[uid] = undefined

		message.text = Number(message.text);
		let user = await User.findOne({ id: message.text });
		let u = user
		if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

		let partners = await User.find({ ref: message.text });
		await message.user.set('menu', '');
		var kb = { inline_keyboard: [] }
		if (u.ban) kb.inline_keyboard.push([{ text: "‚ôªÔ∏è –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data: "unban_" + u.id }])
		else kb.inline_keyboard.push([{ text: "üõë –ó–∞–±–∞–Ω–∏—Ç—å", callback_data: "ban_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫", callback_data: "addBuyBal_" + u.id }, { text: "‚úèÔ∏è –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫", callback_data: "editBuyBal_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data: "addOutBal_" + u.id }, { text: "‚úèÔ∏è –ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data: "editOutBal_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data: "addPayIns_" + u.id }, { text: "‚úèÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data: "editPayIns_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –í—ã–≤–µ–¥–µ–Ω–æ", callback_data: "addPayOuts_" + u.id }, { text: "‚úèÔ∏è –í—ã–≤–µ–¥–µ–Ω–æ", callback_data: "editPayOuts_" + u.id }])

		kb.inline_keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }])

		return message.send(`üìù –ü—Ä–∏–≥–ª–∞—Å–∏–ª: <b>${partners.length}</b>
~~~~~~~~~~~~~~~~~~~~~
üóÇ –Æ–∑–µ—Ä: @${user.username}
üÜî ID: <code>${user.id}</code>
üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.regDate}
~~~~~~~~~~~~~~~~~~~~~
üë®‚Äçüíª –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${await User.countDocuments({ ref: user.id })} | 0.00‚ÇΩ
üë®‚Äçüíº –ê–∫—Ç–∏–≤–Ω—ã—Ö: 0 | 0.00‚ÇΩ (–Ω–µ –ø–∞—à–µ—Ç)
üôÖ‚Äç‚ôÇ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: 0 | 0.00‚ÇΩ (–ù–µ –ø–∞—à–µ—Ç)
~~~~~~~~~~~~~~~~~~~~~
üé≤ –ò–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.buybalance.toFixed(2)}‚ÇΩ
üí≥ –ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞: ${user.outbalance.toFixed(2)}‚ÇΩ
~~~~~~~~~~~~~~~~~~~~~
üé∞ –ò–≥—Ä —Å—ã–≥—Ä–∞–ª: ${user.gameplay} —Ä–∞–∑
üéâ –í—ã–∏–≥—Ä–∞–ª: ${user.win} —Ä–∞–∑
üëé –ü—Ä–æ–∏–≥—Ä–∞–ª: ${user.lose} —Ä–∞–∑
üéÅ –ü–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å–æ–≤: ${user.bonuscount} —Ä–∞–∑
~~~~~~~~~~~~~~~~~~~~~
<b>–ü–æ–ø–æ–ª–Ω–∏–ª: ${roundPlus(user.deposit)}‚ÇΩ</b>
<b>–í—ã–≤–µ–ª: ${roundPlus(user.payout)}‚ÇΩ</b>`, {
			parse_mode: "HTML",
			reply_markup: kb
		});

	}

	if (state[uid] == 7773 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { $inc: { buybalance: Number(text) } })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–≥—Ä –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 7774 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { $inc: { outbalance: Number(text) } })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 777455 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { deposit: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 77745555 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { payout: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 7775 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { buybalance: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 7776 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { outbalance: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 777655 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { deposit: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∏–∑–º–µ–Ω–∞ –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω–∞ –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 77765555 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { payout: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –∏–∑–º–µ–Ω–∞ –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω–∞ –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[message.chat.id] == 99999 && ADMINS.indexOf(message.from.id) !== -1) {
		state[message.chat.id] = undefined
		var sum = Number(message.text)
		if (sum != 0) {
			var cid = generateID(8)
			var v = new Promo({ id: cid, sum: sum })
			await v.save()
			bot.sendMessage(message.chat.id, `–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n<code>P${cid}</code>`, { replyMarkup: Start, parse_mode: "HTML" });
		} else bot.sendMessage(message.chat.id, '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!', { replyMarkup: Start });
	}
	if (state[message.chat.id] == 10000 && ADMINS.indexOf(message.from.id) !== -1) {
		state[message.chat.id] = undefined
		var sum = Number(message.text)
		if (sum != 0) {
			var cid = generateID(8)
			var v = new Promo({ id: cid, sum: sum })
			await v.save()
			bot.sendMessage(message.chat.id, `–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n<code>O${cid}</code>`, { replyMarkup: Start,parse_mode: "HTML" });
		} else bot.sendMessage(message.chat.id, '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!', { replyMarkup: Start });
	}
	if (state[message.chat.id] == 10001 && ADMINS.indexOf(message.from.id) !== -1) {
		var p = text.split("\n")
		p.map(async (o) => {
			var par = o.split("=")[0].replace(/(^\s*)|(\s*)$/g, '')
			var val = o.split("=")[1].replace(/(^\s*)|(\s*)$/g, '')
			await Config.findOneAndUpdate({ parameter: par }, { value: val }, { upsert: true })
		})
		initConfig()
		var params = await Config.find({})
		bot.sendMessage(uid, `<i>–í–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω–µ–Ω—ã!\n\n</i><b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞:</b>\n\n${params.map((o) => { return `<code>${o.parameter}</code> - ${o.value} - <i>${o.description}</i>` }).join("\n")}`, { 
			parse_mode: html, 
			webPreview: false,
			reply_markup: {
				inline_keyboard: [
					[{ text: "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data: "admin_setparametrs" }],
					[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }]
				]
			} 
		})
		state[uid] = undefined
	}

	if (message.text) {
		if (message.text == 'üö´ –û—Ç–º–µ–Ω–∞') {
			state[uid] = undefined
			await message.user.set('menu', '');
			return message.send('üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	if (message.user.menu.startsWith('amountQiwi')) {
		message.text = Number(message.text);

		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥!');
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥!');

		if (message.text > message.user.outbalance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		if (message.text < 1) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª–µ–µ 1 —Ä—É–±–ª—è!');

		if (message.text <= message.user.outbalance) {
			await message.user.dec('outbalance', message.text);
			//await message.user.inc('payout', message.text);

			let ticket = new Ticket({
				id: message.from.id,
				amount: message.text,
				wallet: message.user.menu.split('amountQiwi')[1]
			});

			await ticket.save();
			await message.user.set('menu', '');
			await User.findOneAndUpdate({ id: 2 }, { $inc: { deposit: message.text } })
			return message.send('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ.', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	if (message.user.menu == 'qiwi') {

		if (message.text.length < 5) return message.send('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});



		await message.user.set('menu', 'amountQiwi' + message.text);
		return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ${message.user.outbalance.toFixed(2)}‚ÇΩ`);
	}

	if (message.text) {
		if (message.text == 'üé≤ –ò–≥—Ä—ã') {
			return message.send(`<b>üé≤ –ò–≥—Ä–æ–≤–æ–π –∫–∞–±–∏–Ω–µ—Ç</b>\n
<b>üí∞ –ò–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> ${roundPlus(message.user.buybalance)}‚ÇΩ\n`, {
				parse_mode: "html",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üîí –°—É–Ω–¥—É–∫", callback_data: "game_chest" }, { text: "üíà –†—É–ª–µ—Ç–∫–∞", callback_data: "game_roulette" }],
						[{ text: "üé∞ –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã", callback_data: "game_casino" }, { text: "üí£ –ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ", callback_data: "game_bomb" }],
						[{ text: "üåó –û—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞", callback_data: "game_orelilirehka" }, { text: "ü•õ –°—Ç–∞–∫–∞–Ω", callback_data: "game_stakan4ik" }],
						[{ text: "üìà Gold –ö—É—Ä—Å", callback_data: "game_trade" }, { text: "üì¶ –ö–µ–π—Å", callback_data: "game_case" }],
						[{ text: "üéÅ –ë–æ–Ω—É—Å", callback_data: "bonus" }, { text: "‚òòÔ∏è –õ–æ—Ç–µ—Ä–µ—è", callback_data: "game_lotterys"} ],

					]
				}
			});
		}
		if (message.text == 'üñ• –ü—Ä–æ—Ñ–∏–ª—å') {
			return message.send(`üìù –ò–º—è: <b>${message.from.first_name.replace(/(\<|\>)/g, '')}</b>

<b>üé≤ –ò–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> ${message.user.buybalance.toFixed(2)}‚ÇΩ
<b>üí≥ –ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> ${message.user.outbalance.toFixed(2)}‚ÇΩ
~~~~~~~~~~~~~~~~~~~~~
üÜî <b>ID:</b> <code>${message.from.id}</code>
üé∞ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: ${message.user.gameplay} —Ä–∞–∑
üéâ –í—ã–∏–≥—Ä–∞–Ω–æ: ${message.user.win} —Ä–∞–∑
üëé –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: ${message.user.lose} —Ä–∞–∑
~~~~~~~~~~~~~~~~~~~~~
üí∏ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–æ:</b> ${message.user.deposit.toFixed(2)}‚ÇΩ
ü§ë <b>–í—ã–≤–µ–¥–µ–Ω–æ:</b> ${message.user.payout.toFixed(2)}‚ÇΩ`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üóÉ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data: "promoact" }],
						[{ text: "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data: "deposit" }, { text: "üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data: "withdraw" }],
					]
				}
			});
		}
//üéä –í—ã —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: ${await User.countDocuments({ ref: message.from.id })}
		if (message.text == 'üë®‚Äçüíª –ü–∞—Ä—Ç–Ω–µ—Ä—ã') {
			return message.send(`<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>	   
üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: https://t.me/PlayGoldBot?start=${message.from.id}

ü§ù –ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${config.refbonus}‚ÇΩ

üì• –° –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: ${config.refpercent * 100}%

üë®‚Äçüíª –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: ${await User.countDocuments({ ref: message.from.id })}
		`, {
				parse_mode: "HTML"
			})
		}
		
		if (state[uid] == 11000) {
			let postfix = message.text
				if (postfix[0] == "P") {
					message.user = await User.findOne({ id: message.from.id });

					var c = await Promo.findOne({ id: postfix.substr(1) })
					var sum = c.sum
					if (c) {
						bot.sendMessage(message.from.id, "‚úÖ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ <b>" + sum + "</b> —Ä—É–±–ª–µ–π –¥–ª—è –ø–æ–∫—É–ø–æ–∫", { parse_mode: "HTML" })
						await Promo.deleteOne({ _id: c._id })
						await message.user.inc("buybalance", sum)
						state[uid] = undefined
					}
					else
					bot.sendMessage(message.from.id, "üòû –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
					state[uid] = undefined
				}
			else if (postfix[0] == "O") {
					message.user = await User.findOne({ id: message.from.id });

					var c = await Promo.findOne({ id: postfix.substr(1) })
					if (c) {
						var sum = c.sum
						bot.sendMessage(message.from.id, "‚úÖ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ <b>" + sum + "</b> —Ä—É–±–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞", { parse_mode: "HTML" })
						await Promo.deleteOne({ _id: c._id })
						await message.user.inc("outbalance", sum)
						state[uid] = undefined
					}
					else
					bot.sendMessage(message.from.id, "üòû –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
					state[uid] = undefined
				}
			else
			bot.sendMessage(message.from.id, "üòû –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
			state[uid] = undefined
		}

		if (message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
			var s = await User.findOne({ id: 0 })
			let t = new Date()
            t = t.getTime() - 1593648000 * 1000
			var day = t / 86400000 ^ 0
			let stats = {
				users: await User.countDocuments(),
				users_today: await User.find({ regDate: `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}` }),
				cmds: message.message_id
			}
			console.log(stats.users_today)
			stats.users_today = stats.users_today.length;

			return message.send(`
üìä<b> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n
üë®‚Äçüíª –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${stats.users + config.givestats}
üë®‚Äçüíº –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${stats.users_today}
üìÜ –†–∞–±–æ—Ç–∞–µ–º: ${day} –¥–Ω–µ–π
üéâ –í—ã–∏–≥—Ä–∞–Ω–æ: ${Math.round(s.win)}‚ÇΩ
üì§ –í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: ${Math.round(s.fc)}‚ÇΩ
`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üí¨ –ß–∞—Ç", url: "https://t.me/playgold_chat" } , { text: "üë®‚Äçüíª –ê–¥–º–∏–Ω", url: "https://t.me/TG_PromotionAdmin" }],
						[{ text: "üóû –ù–æ–≤–æ—Å—Ç–∏", url: "https://t.me/playgame_info" } ,{ text: "üí∞ –í—ã–≤–æ–¥—ã", url: "https://t.me/playgame_money" }],
					    [{ text: "üéâ –¢–æ–ø –≤—ã–∏–≥—Ä—ã—à–µ–π", callback_data: "topwins" }, { text: "üí≥ –¢–æ–ø –≤—ã–≤–æ–¥–æ–≤", callback_data: "topvivod" }],
						[{ text: "üèÜ –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤", callback_data: "topRef" }],
					]
				}
			});
		}
		if (state[uid] == 8877) {
			var sum = Number(message.text)
			if (isNaN(sum)) return message.send(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:`, { parse_mode: "HTML" });
			if (sum <= 1) return message.send(`‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –±–æ–ª–µ–µ 1‚ÇΩ`, { parse_mode: "HTML" });
			if (sum > message.user.buybalance) return message.send(`–ù–∞ –í–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:`, { parse_mode: "HTML" });
			state[uid] = undefined
			var field
			var arr = randomizeArr(randomizeArr([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0]))
			field = [
				[arr[0], arr[1], arr[2], arr[3]],
				[arr[4], arr[5], arr[6], arr[7]],
				[arr[8], arr[9], arr[10], arr[11]],
				[arr[12], arr[13], arr[14], arr[15]],
			]
			await User.findOneAndUpdate({ id: uid }, { data: JSON.stringify(field), $inc: { buybalance: -sum, game_limit: -1, game_bet: sum }, bank: sum })

			return bot.sendMessage(message.chat.id, `<b>üí£ –ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ</b>\n
‚ñ´Ô∏è –í—Å–µ–≥–æ –Ω–∞ –ø–æ–ª–µ 6 –º–∏–Ω
‚ñ´Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–∞ - 50‚ÇΩ 
‚ñ´Ô∏è –° –∫–∞–∂–¥—ã–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è +2% –æ—Ç —Å—É–º–º—ã –≤—Ö–æ–¥–∞
‚ñ´Ô∏è –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞:  ${message.user.outbalance.toFixed(0)}‚ÇΩ
‚ñ´Ô∏è –û—Ç–∫—Ä–æ–µ—Ç–µ –≤—Å–µ –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ - –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑:
–ú–æ—Ä—Ç–∞ ‚ñ´Ô∏è –ú–µ–π—Å–æ–Ω–∞ ‚ñ´Ô∏è 10‚ÇΩ ‚ñ´Ô∏è 20‚ÇΩ ‚ñ´Ô∏è 35‚ÇΩ ‚ñ´Ô∏è 40‚ÇΩ\n
üí∞ <b>–ë–∞–Ω–∫ –∏–≥—Ä—ã:</b> ${roundPlus(sum)}‚ÇΩ\n
üëá <b>–í—ã–±–µ—Ä–µ—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è —Ö–æ–¥–∞:</b>
		`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "‚ùì", callback_data: "gameBomb_0,0" }, { text: "‚ùì", callback_data: "gameBomb_0,1" }, { text: "‚ùì", callback_data: "gameBomb_0,2" }, { text: "‚ùì", callback_data: "gameBomb_0,3" }],
						[{ text: "‚ùì", callback_data: "gameBomb_1,0" }, { text: "‚ùì", callback_data: "gameBomb_1,1" }, { text: "‚ùì", callback_data: "gameBomb_1,2" }, { text: "‚ùì", callback_data: "gameBomb_1,3" }],
						[{ text: "‚ùì", callback_data: "gameBomb_2,0" }, { text: "‚ùì", callback_data: "gameBomb_2,1" }, { text: "‚ùì", callback_data: "gameBomb_2,2" }, { text: "‚ùì", callback_data: "gameBomb_2,3" }],
						[{ text: "‚ùì", callback_data: "gameBomb_3,0" }, { text: "‚ùì", callback_data: "gameBomb_3,1" }, { text: "‚ùì", callback_data: "gameBomb_3,2" }, { text: "‚ùì", callback_data: "gameBomb_3,3" }],
						[{ text: "üí∞ –ó–∞–±—Ä–∞—Ç—å –±–∞–Ω–∫", callback_data: "gameBombCollect" },],
					]
				}
			});
		}

		if (state[uid] == 10002) {
			var sum = Number(message.text)
			if (isNaN(sum)) return message.send(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:`, { parse_mode: "HTML" });
			if (sum <= 0) return message.send(`‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –±–æ–ª–µ–µ 0.01‚ÇΩ`, { parse_mode: "HTML" });
			if (sum > message.user.buybalance) return message.send(`–ù–∞ –í–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:`, { parse_mode: "HTML" });
			state[uid] = undefined
			return bot.sendMessage(message.chat.id, `
üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: ${sum}
‚ùì –ù–∞ —á—Ç–æ –¥–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É?`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üåë –û—Ä—ë–ª", callback_data: `gameorel_` + sum }],
						[{ text: "üåï –†–µ—à–∫–∞", callback_data: `gamereshka_` + sum }]
					]
				}
			});
		}
		
		if (state[uid] == 10003) {
			var sum = Number(message.text)
			if (isNaN(sum)) return message.send(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:`, { parse_mode: "HTML" });
			if (sum <= 0) return message.send(`‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –±–æ–ª–µ–µ 0.01‚ÇΩ`, { parse_mode: "HTML" });
			if (sum > message.user.buybalance) return message.send(`–ù–∞ –í–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:`, { parse_mode: "HTML" });
			state[uid] = undefined
			return bot.sendMessage(message.chat.id, `
üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: ${sum}‚ÇΩ
‚ùì –ö–∞–∫–æ–π —Å—Ç–∞–∫–∞–Ω –≤—ã–±–µ—Ä–∏—à—å?`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "ü•õ", callback_data: `gamestakan_` + sum + '_' + '1'}, { text: "ü•õ", callback_data: `gamestakan_` + sum + '_' + '2'}, { text: "ü•õ", callback_data: `gamestakan_` + sum + '_' + '3' }]
					]
				}
			});
		}
		
		if (state[uid] == 10004) {
			var sum = Number(message.text)
			if (isNaN(sum)) return message.send(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:`, { parse_mode: "HTML" });
			if (sum <= 0) return message.send(`‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –±–æ–ª–µ–µ 0.01‚ÇΩ`, { parse_mode: "HTML" });
			if (sum > message.user.buybalance) return message.send(`–ù–∞ –í–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:`, { parse_mode: "HTML" });
			state[uid] = undefined
			let kyrs = randomInteger(1, 1000)
			return bot.sendMessage(message.chat.id, `
üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: ${sum}‚ÇΩ
üìë –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: ${kyrs} 
üìä –ö–∞–∫–æ–π –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å –≤—ã–±–µ—Ä–∏—à—å?`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data: `gametradeup_` + sum + '_' + kyrs}],
						[{ text: "‚¨áÔ∏è –í–Ω–∏–∑", callback_data: `gametradedown_` + sum + '_' + kyrs}]
					]
				}
			});
		}
/*		
		if (state[uid] == 10005) {
			var sum = Number(message.text)
			if (isNaN(sum)) return message.send(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:`, { parse_mode: "HTML" });
			if (sum < 0) return message.send(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª–µ–µ 0`, { parse_mode: "HTML" });
			if (sum > message.user.buybalance) return message.send(`–ù–∞ –í–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:`, { parse_mode: "HTML" });
			state[uid] = undefined
			let kef = randomizeArr([0.96, 0.40, 8.33, 4.30, 5.20, 0.20, 0.20, 0.10, 0.5, 0.7]) 
			return bot.sendMessage(message.chat.id, `
–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${sum * kef[0]}`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "‚¨ú", callback_data: `game`}, { text: "‚¨áÔ∏è", callback_data: `game`}, { text: "‚¨ú", callback_data: `game`}],
						[{ text: `${kef[1]}x`, callback_data: `fe`},{ text: `${kef[0]}x`, callback_data: `game`}, { text: `${kef[3]}x`, callback_data: `game`}],
						[{ text: "‚¨ú", callback_data: `game`},{ text: "‚¨ÜÔ∏è", callback_data: `game`}, { text: "‚¨ú", callback_data: `game`}],
						[{ text: "üîÑ –ï—â—ë —Ä–∞–∑", callback_data: "game_case" }]
					]
				}
			});
		} */
		
		if (state[uid] == 10005) {
			var sum = Number(message.text)
			if (isNaN(sum)) return message.send(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:`, { parse_mode: "HTML" });
			if (sum <= 0) return message.send(`‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –±–æ–ª–µ–µ 0.01‚ÇΩ`, { parse_mode: "HTML" });
			if (sum > message.user.buybalance) return message.send(`–ù–∞ –í–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:`, { parse_mode: "HTML" });
			state[uid] = undefined
			//let kef = randomizeArr([0.96, 0.40, 8.33, 4.30, 5.20, 0.20, 0.20, 0.10, 0.5, 0.7]) 
	//		let kef = randomizeArr([0.23, 0.48, 0.87, 0.45, 1.32, 0.34, 0.76, 0.43, 0.65, 0.22, 1.26, 0.54, 0.38, 1.65, 0.98, 0.87, 1.87, 2.55, 0.14, 0.44, 1.20, 0.87, 0.37, 0.17, 0.39, 0.10, 2.32, 0.18, 0.19, 0.42, 0.98, 1.11, 0.13, 0.79, 1.15, 0.98, 2.11, 1.41, 0.69, 0.10, 3.12, 0.87, 0.33, 1.47, 0.21, 0.50, 1, 0.93, 1.50, 0.55, 0.66, 0.17, 0.29, 1.78, 0.31, 0.21, 0.47, 0.26, 4.12, 0.55, 0.41, 1.54, 5.41, 0.25, 0.26, 0.27, 0.64, 0.48, 0.95, 0.47, 0.10, 0.93, 0.68, 0.67, 0.63, 0.73]) 
		//	let kef = randomizeArr([1.12, 0.22, 0.45, 1.36, 0.68, 0.74, 2.65, 1.11, 0.47, 3.41, 0.01, 0.86, 2.20, 0.98, 1.47, 4.57, 0.12, 0.36, 3.74, 0.50, 0.40]) 
			let kef1 = randomizeArr([1.24, 2.68, 1.69, 3.20, 6.87, 3.11, 2.41, 1.96, 1.35, 8.84, 3.40, 2.54, 8.58, 4.80, 2.11, 2.15, 4.74, 2.98, 3.01, 4.05, 8.12, 6.41, 2.65, 3.84, 2.43, 4.31, 5.59, 4.14, 1.68, 0.96, 0.65, 0.54, 3.49, 2.93, 8.65, 1.68]) 
			let kef = randomizeArr([0.85, 0.96, 0.45, 0.82, 1.14, 0.65, 0.32, 1.69, 0.95, 0.74, 0.54, 1.19, 1.42, 0.56, 0.54, 0.31, 0.89, 2.12, 1.19, 0.48, 0.36, 0.99, 1.65, 0.35, 1.24, 0.26, 0.74, 0.39, 1.54, 0.42, 0.87, 1.48, 0.63, 3.24, 0.85, 0.10, 0.05]) 
			await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -sum } })
			await User.findOneAndUpdate({ id: uid }, { $inc: { outbalance: sum * kef[0] } })
			return bot.sendMessage(message.chat.id, `
–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${sum * kef[0]}`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "‚¨ú", callback_data: `game`}, { text: "‚¨áÔ∏è", callback_data: `game`}, { text: "‚¨ú", callback_data: `game`}],
						[{ text: `${kef1[1]}x`, callback_data: `fe`},{ text: `${kef[0]}x`, callback_data: `game`}, { text: `${kef1[3]}x`, callback_data: `game`}],
						[{ text: "‚¨ú", callback_data: `game`},{ text: "‚¨ÜÔ∏è", callback_data: `game`}, { text: "‚¨ú", callback_data: `game`}],
						[{ text: "üîÑ –ï—â—ë —Ä–∞–∑", callback_data: "game_case" }]
					]
				}
			});
		}		
		
	}

	if (ADMINS.indexOf(message.from.id) !== -1) {
		if (message.text == 'üîù –ê–¥–º–∏–Ω–∫–∞') {
			var h = process.uptime() / 3600 ^ 0
			var m = (process.uptime() - h * 3600) / 60 ^ 0
			var s = process.uptime() - h * 3600 - m * 60 ^ 0
			var heap = process.memoryUsage().rss / 1048576 ^ 0
		var zeroId = await User.findOne({ id: 0 })

			return qiwi.getBalance(async (err, balance) => {
		bot.sendMessage(uid, `
		<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n
		<b>–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:</b> ${h} —á–∞—Å–æ–≤ ${m} –º–∏–Ω—É—Ç ${s} —Å–µ–∫—É–Ω–¥
		<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: </b>${await User.countDocuments()}
		<b>–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:</b> ${await Ticket.countDocuments()}
		<b>–ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é:</b> ${zeroId.deposit}%
		<b>–ë–∞–ª–∞–Ω—Å QIWI:</b> ${balance.accounts[0].balance.amount}
		`, { parse_mode: "HTML", reply_markup: RM_admin })
				/*require('request')({
					method: 'POST',
					url: 'https://payeer.com/ajax/api/api.php?getBalance',
					headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
					body: `account=${config.payeer.account}&apiId=${config.payeer.apiId}&apiPass=${config.payeer.apiPass}&action=getBalance`
				}, async function (error, response, body2) {
					body2 = JSON.parse(body2)
					console.log(body2)
					bot.sendMessage(uid, '<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n<b>–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:</b> ' + h + ' —á–∞—Å–æ–≤ ' + m + ' –º–∏–Ω—É—Ç ' + s + ' —Å–µ–∫—É–Ω–¥\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: </b>' + (await User.countDocuments({})) + '\n<b>–ü–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> ' + heap + "–ú–ë\n<b>–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:</b> " + await Ticket.countDocuments() + "\n<b>–ë–∞–ª–∞–Ω—Å QIWI:</b> " + balance.accounts[0].balance.amount + `‚ÇΩ\n<b>–ë–∞–ª–∞–Ω—Å Payeer:</b> ${body2.balance.RUB.available}‚ÇΩ\n<b>–ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é:</b> ` + b + "%\n<b>–õ–∏–º–∏—Ç –Ω–∞ –∑–≤–µ—Ä–µ–π: </b>" + limit + " –µ–¥–Ω–∏–Ω–∏—Ü", { parse_mode: "HTML", reply_markup: RM_admin })

				})*/
			})
				
		}

	if (query.data == 'game_roulette') {
		var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)

		if (!game.statusroulet) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `<b>üíà –†—É–ª–µ—Ç–∫–∞</b>\n
<b>üé≤ –í–∞—à –±–∞–ª–∞–Ω—Å</b> ${roundPlus(message.user.buybalance)}‚ÇΩ
<b>üí≥ –î–ª—è –≤—ã–≤–æ–¥–∞:</b> ${roundPlus(message.user.outbalance)}‚ÇΩ\n			
<b>‚ùóÔ∏è –í—Ä–∞—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è:</b> ${message.user.spinsToday || 0}/2\n
<b>üóÇ –í —Ä—É–ª–µ—Ç–∫–µ 7 —è—á–µ–µ–∫:</b>
0‚ÇΩ | 0‚ÇΩ | 0‚ÇΩ | 5‚ÇΩ | 20‚ÇΩ | 30‚ÇΩ
	`, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [
					[{ text: "üíà –ö—É–ø–∏—Ç—å –≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞ 10‚ÇΩ", callback_data: "game_roulette_spin" }],
				]
			}
		});
	}

	if (query.data == 'game_roulette_spin') {
		var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)

		if (!game.statusroulet) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		if (message.user.spinsToday >= 2) return bot.answerCallbackQuery(query.id, '‚ùå –í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ 2 –≤—Ä–∞—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è!', true);
		if (message.user.buybalance < 10) return bot.answerCallbackQuery(query.id, '‚ùå –ù–∞ –í–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', true);
		await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -10, spinsToday: 1 } })
		bot.deleteMessage(message.chat.id, message.message_id);
		var arr = randomizeArr([0, 0, 0, 5,5,20,5,5,30,5,5])
		await User.findOneAndUpdate({ id: uid }, { $inc: { outbalance: arr[3] } })
		return bot.sendMessage(message.chat.id, `üíà <b>–†—É–ª–µ—Ç–∫–∞</b>\n\n
						${arr[0]}‚ÇΩ
						${arr[1]}‚ÇΩ
						${arr[2]}‚ÇΩ
üîπ${arr[3]}‚ÇΩüîπ
						${arr[4]}‚ÇΩ
						${arr[5]}‚ÇΩ\n
<b>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${arr[3]}‚ÇΩ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å!</b>
	`, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [
					[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "game_roulette" }],
				]
			}
		});
	}

	if (query.data == 'game_chest') {
		var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)

		if (!game.statuschest) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendPhoto(message.chat.id, `chest.png`, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [
					[{ text: "1‚ÇΩ", callback_data: "casino_1" },
					{ text: "2‚ÇΩ", callback_data: "casino_2" },
					{ text: "5‚ÇΩ", callback_data: "casino_5" },
					{ text: "10‚ÇΩ", callback_data: "casino_10" }],
					[{ text: "25‚ÇΩ", callback_data: "casino_25" },
					{ text: "50‚ÇΩ", callback_data: "casino_50" },
					{ text: "100‚ÇΩ", callback_data: "casino_100" },
					{ text: "250‚ÇΩ", callback_data: "casino_250" }],
				]
			}, caption: `üîí –í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É–Ω–¥—É–∫–∞
üçÄ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –¥–≤–∞ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ ‚ÇΩ, –∞ –º–æ–∂–µ—Ç –±—ã—Ç—å, —Å—É–Ω–¥—É–∫ –æ–∫–∞–∂–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: 50%`
		});
	}

	if (query.data.startsWith("casino_open")) {
		var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)

		if (!game.statuschest) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		bot.deleteMessage(message.chat.id, message.message_id)
		var bet = Number(query.data.split("_")[2])
		if (bet > message.user.buybalance) await bot.answerCallbackQuery(query.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!', true);
		//else if (Math.random() >= 0.58) {
		else if (Math.random() >= 0.75) {
			await message.user.inc("outbalance", bet)
			await bot.answerCallbackQuery(query.id, 'üí∏ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ' + bet * 2 + "‚ÇΩ!", true);
		} else {
			await message.user.inc("buybalance", -bet)
			await bot.answerCallbackQuery(query.id, "üòû –°—É–Ω–¥—É–∫ –ø—É—Å—Ç", true);
		}
		return bot.sendPhoto(message.chat.id, `chest.png`, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [
					[{ text: "1‚ÇΩ", callback_data: "casino_1" },
					{ text: "2‚ÇΩ", callback_data: "casino_2" },
					{ text: "5‚ÇΩ", callback_data: "casino_5" },
					{ text: "10‚ÇΩ", callback_data: "casino_10" }],
					[{ text: "25‚ÇΩ", callback_data: "casino_25" },
					{ text: "50‚ÇΩ", callback_data: "casino_50" },
					{ text: "100‚ÇΩ", callback_data: "casino_100" },
					{ text: "250‚ÇΩ", callback_data: "casino_250" }],
					[{ text: "üîì –û—Ç–∫—Ä—ã—Ç—å –∑–∞ " + bet + "‚ÇΩ", callback_data: "casino_open_" + bet }]
				]
			}, caption: `üîí –í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É–Ω–¥—É–∫–∞
üçÄ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –¥–≤–∞ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ ‚ÇΩ, –∞ –º–æ–∂–µ—Ç –±—ã—Ç—å, —Å—É–Ω–¥—É–∫ –æ–∫–∞–∂–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: 50%
						
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${message.user.buybalance} ‚ÇΩ
üí∏ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: ${bet} ‚ÇΩ
üé∞ –í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: ${bet * 2} ‚ÇΩ`
		})

	}

	if (query.data.startsWith("casino")) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var bet = Number(query.data.split("_")[1])
		return bot.sendPhoto(message.chat.id, `chest.png`, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [
					[{ text: "1‚ÇΩ", callback_data: "casino_1" },
					{ text: "2‚ÇΩ", callback_data: "casino_2" },
					{ text: "5‚ÇΩ", callback_data: "casino_5" },
					{ text: "10‚ÇΩ", callback_data: "casino_10" }],
					[{ text: "25‚ÇΩ", callback_data: "casino_25" },
					{ text: "50‚ÇΩ", callback_data: "casino_50" },
					{ text: "100‚ÇΩ", callback_data: "casino_100" },
					{ text: "250‚ÇΩ", callback_data: "casino_250" }],
					[{ text: "üîì –û—Ç–∫—Ä—ã—Ç—å –∑–∞ " + bet + "‚ÇΩ", callback_data: "casino_open_" + bet }]
				]
			}, caption: `üîí –í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É–Ω–¥—É–∫–∞
üçÄ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –¥–≤–∞ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ ‚ÇΩ, –∞ –º–æ–∂–µ—Ç –±—ã—Ç—å, —Å—É–Ω–¥—É–∫ –æ–∫–∞–∂–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: 50%
						
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${message.user.buybalance} ‚ÇΩ
üí∏ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: ${bet} ‚ÇΩ
üé∞ –í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: ${bet * 2} ‚ÇΩ`
		})
	}

	if (query.data == 'game_orelilirehka') {
		var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)
		if (!game.statusorel) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		if (message.user.buybalance == 0) return bot.answerCallbackQuery(query.id, '‚ùå –ù–∞ –í–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', true);
		var q =  roundPlus(message.user.buybalance * 0.10)
		var w =  roundPlus(message.user.buybalance * 0.20)
		var e =  roundPlus(message.user.buybalance * 0.35)
		var r =  roundPlus(message.user.buybalance * 0.50)
		var t =  roundPlus(message.user.buybalance * 0.75)
		var y =  roundPlus(message.user.buybalance )
		if (message.user.buybalance == 0) {
var markup = [["üö´ –û—Ç–º–µ–Ω–∞"]]
		}
		else {
		var markup = [[`${q}`, `${w}`, `${e}`], [`${r}`, `${t}`, `${y}`], ["üö´ –û—Ç–º–µ–Ω–∞"]]
		}
	//	var d = [[`${q}`, `${w}`, `${e}`], [`${r}`, `${t}`, `${y}`]]
		bot.deleteMessage(message.chat.id, message.message_id);
		state[uid] = 10002
		return bot.sendMessage(message.chat.id, `
<b>üåó –û—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞</b>\n

üé≤ –í–∞—à –±–∞–ª–∞–Ω—Å: ${roundPlus(message.user.buybalance)}‚ÇΩ
üí≥ –î–ª—è –≤—ã–≤–æ–¥–∞: ${roundPlus(message.user.outbalance)}‚ÇΩ

<b>üì± –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤—ã–±–µ—Ä–∏—Ç–µ  —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 0.01‚ÇΩ‚ùóÔ∏è</b>
	`, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: markup,
				resize_keyboard: true
			}
		});
	}

	if (query.data == 'game_stakan4ik') {
		var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)
		if (!game.statusstakan) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		if (message.user.buybalance == 0) return bot.answerCallbackQuery(query.id, '‚ùå –ù–∞ –í–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', true);
		var q =  roundPlus(message.user.buybalance * 0.10)
		var w =  roundPlus(message.user.buybalance * 0.20)
		var e =  roundPlus(message.user.buybalance * 0.35)
		var r =  roundPlus(message.user.buybalance * 0.50)
		var t =  roundPlus(message.user.buybalance * 0.75)
		var y =  roundPlus(message.user.buybalance )
	if (message.user.buybalance == 0) return bot.answerCallbackQuery(query.id, '‚ùå –ù–∞ –í–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', true);
		if (message.user.buybalance == 0) {
var markup = [["üö´ –û—Ç–º–µ–Ω–∞"]]
		}
		else {
		var markup = [[`${q}`, `${w}`, `${e}`], [`${r}`, `${t}`, `${y}`], ["üö´ –û—Ç–º–µ–Ω–∞"]]
		}
		bot.deleteMessage(message.chat.id, message.message_id);
		state[uid] = 10003
		return bot.sendMessage(message.chat.id, `
<b>ü•õ –°—Ç–∞–∫–∞–Ω</b>\n

üé≤ –í–∞—à –±–∞–ª–∞–Ω—Å: ${roundPlus(message.user.buybalance)}‚ÇΩ
üí≥ –î–ª—è –≤—ã–≤–æ–¥–∞: ${roundPlus(message.user.outbalance)}‚ÇΩ

<b>üì± –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤—ã–±–µ—Ä–∏—Ç–µ  —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 0.01‚ÇΩ‚ùóÔ∏è</b>
	`, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: markup,
				resize_keyboard: true
			}
		});
	}
	
	if (query.data == 'game_trade') {
			var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)
			if (!game.statuskyrs) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		if (message.user.buybalance == 0) return bot.answerCallbackQuery(query.id, '‚ùå –ù–∞ –í–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', true);
			var q =  roundPlus(message.user.buybalance * 0.10)
			var w =  roundPlus(message.user.buybalance * 0.20)
			var e =  roundPlus(message.user.buybalance * 0.35)
			var r =  roundPlus(message.user.buybalance * 0.50)
			var t =  roundPlus(message.user.buybalance * 0.75)
			var y =  roundPlus(message.user.buybalance )
			if (message.user.buybalance == 0) {
	var markup = [["üö´ –û—Ç–º–µ–Ω–∞"]]
			}
			else {
			var markup = [[`${q}`, `${w}`, `${e}`], [`${r}`, `${t}`, `${y}`], ["üö´ –û—Ç–º–µ–Ω–∞"]]
			}
			bot.deleteMessage(message.chat.id, message.message_id);
			state[uid] = 10004
			return bot.sendMessage(message.chat.id, `
	<b>üìà Gold –ö—É—Ä—Å</b>\n
	
	üé≤ –í–∞—à –±–∞–ª–∞–Ω—Å: ${roundPlus(message.user.buybalance)}‚ÇΩ
	üí≥ –î–ª—è –≤—ã–≤–æ–¥–∞: ${roundPlus(message.user.outbalance)}‚ÇΩ
	
	<b>üì± –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 0.01‚ÇΩ‚ùóÔ∏è</b>
		`, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: markup,
					resize_keyboard: true
				}
			});
		}	
	//	await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -sum } })
	if (query.data.startsWith("gameorel")) {
    	var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)
	
		if (!game.statusorel) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		bot.deleteMessage(message.chat.id, message.message_id)
		var bet = Number(query.data.split("_")[1])
		if (bet > message.user.buybalance) await bot.answerCallbackQuery(query.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!', true);
		 if (Math.random() >= 0.58) {
				await message.user.inc("outbalance", bet)
				await message.user.inc("buybalance", -bet)
				await message.user.inc("win", 1)
				await message.user.inc("gameplay", 1)
				await bot.answerCallbackQuery(query.id, 'üåë –û—Ä—ë–ª\nüí≥ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ' + bet * 2 + "‚ÇΩ!", true);
		} else {
				await message.user.inc("buybalance", -bet)
				await message.user.inc("lose", 1)
				await message.user.inc("gameplay", 1)
				await bot.answerCallbackQuery(query.id, "üåï –†–µ—à–∫–∞\nüö´ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ " + bet + "‚ÇΩ!", true);
			}
			return bot.sendMessage(message.chat.id, `–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üîÑ –ï—â—ë —Ä–∞–∑", callback_data: "game_orelilirehka" }]
					],
				},
			})
	
		}

	if (query.data.startsWith("gamereshka")) {
			var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)
		
		if (!game.statusorel) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		bot.deleteMessage(message.chat.id, message.message_id)
		var bet = Number(query.data.split("_")[1])
		if (bet > message.user.buybalance) await bot.answerCallbackQuery(query.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!', true);
		if (Math.random() >= 0.58) {
				await message.user.inc("outbalance", bet * 2)
				await message.user.inc("buybalance", -bet)
				await message.user.inc("win", 1)
				await message.user.inc("gameplay", 1)
				await bot.answerCallbackQuery(query.id, 'üåï –†–µ—à–∫–∞\nüí≥ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ' + bet * 2 + "‚ÇΩ!", true);
			} else {
				await message.user.inc("buybalance", -bet)
				await message.user.inc("lose", 1)
				await message.user.inc("gameplay", 1)
				await bot.answerCallbackQuery(query.id, "üåë –û—Ä—ë–ª\nüö´ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ " + bet + "‚ÇΩ!", true);
			}
			return bot.sendMessage(message.chat.id, `–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üîÑ –ï—â—ë —Ä–∞–∑", callback_data: "game_orelilirehka" }]
					]
				}
			})
		}	
			
	if (query.data.startsWith("gamestakan")) {
		var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)
			
		if (!game.statusstakan) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		bot.deleteMessage(message.chat.id, message.message_id)
		var sum = Number(query.data.split("_")[1])
		var stakan = Number(query.data.split("_")[2])
		var lose = randomInteger(1, 2)
		if(lose == 1) lose = `‚ùóÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ`
		if(lose == 2) lose = `‚ùóÔ∏è –í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏`
		let ctakan = randomInteger(1, 3)
		if (sum > message.user.buybalance) await bot.answerCallbackQuery(query.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!', true);
			else if (ctakan !== stakan) {
				await message.user.inc("buybalance", -sum)
				await message.user.inc("lose", 1)
				await message.user.inc("gameplay", 1)
				await bot.answerCallbackQuery(query.id, `${lose}, —ç—Ç–æ –±—ã–ª ${ctakan}-–π —Å—Ç–∞–∫–∞–Ω\nüö´ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ` + sum + "‚ÇΩ!", true);
				} else {
					await message.user.inc("outbalance", sum * 2)
					await message.user.inc("buybalance", -bet)
					await message.user.inc("win", 1)
					await message.user.inc("gameplay", 1)
					await bot.answerCallbackQuery(query.id, "–í—ã —É–≥–∞–¥–∞–ª–∏\nüí∏ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ " + sum * 2 + "‚ÇΩ!", true);
				}
				return bot.sendMessage(message.chat.id, `–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?`, {
					parse_mode: "HTML",
					reply_markup: {
						inline_keyboard: [
							[{ text: "üîÑ –ï—â—ë —Ä–∞–∑", callback_data: "game_stakan4ik" }]
						]
					}
				})
			}			

	if (query.data.startsWith("gametradeup")) {
			var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)
				
		if (!game.statuskyrs) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		bot.deleteMessage(message.chat.id, message.message_id)
		var sum = Number(query.data.split("_")[1])
		var kyrs = Number(query.data.split("_")[2])
		let win = randomInteger(1, 3)
		let losesmile = randomizeArr([`üò≤`, `üò£`, ` üòÆ`,`üòî`]) 
		let winsmile = randomizeArr([`üòé`, `üòÄ`, ` ü§ë`,`üòá`]) 
		if (sum > message.user.buybalance) await bot.answerCallbackQuery(query.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!', true);
	      if (win == 1) {
				await message.user.inc("outbalance", sum * 2)
				await message.user.inc("buybalance", -bet)
		    	await message.user.inc("win", 1)
				await message.user.inc("gameplay", 1)
				await bot.answerCallbackQuery(query.id, `–ö—É—Ä—Å –ø–æ–¥–æ—Ä–æ–∂–∞–ª‚§¥ –Ω–∞ ${kyrs}.\n‚úÖ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ + ` + sum * 2 + `‚ÇΩ! ${winsmile}`, true);
			}
			if (win == 2, 3) {
				await message.user.inc("buybalance", -sum)
				await message.user.inc("lose", 1)
				await message.user.inc("gameplay", 1)
				await bot.answerCallbackQuery(query.id, `–ö—É—Ä—Å –ø–æ–¥–µ—à–µ–≤–µ–ª‚§µ –Ω–∞ ${kyrs}.\n‚ùå –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ - ` + sum  + `‚ÇΩ! ${losesmile}`, true);
					}		
					return bot.sendMessage(message.chat.id, `–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?`, {
						parse_mode: "HTML",
						reply_markup: {
							inline_keyboard: [
								[{ text: "üîÑ –ï—â—ë —Ä–∞–∑", callback_data: "game_trade" }]
							]
						}
					})
	}
	
	if (query.data.startsWith("gametradedown")) {
			var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)
				
		if (!game.statuskyrs) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		bot.deleteMessage(message.chat.id, message.message_id)
		var sum = Number(query.data.split("_")[1])
		var kyrs = Number(query.data.split("_")[2])
		let win = randomInteger(1, 3)
		let losesmile = randomizeArr([`üò≤`, `üò£`, ` üòÆ`,`üòî`]) 
		let winsmile = randomizeArr([`üòé`, `üòÄ`, ` ü§ë`,`üòá`]) 
		if (sum > message.user.buybalance) await bot.answerCallbackQuery(query.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!', true);
	      if (win == 1) {
				await message.user.inc("outbalance", sum * 2)
				await message.user.inc("buybalance", -bet)
		    	await message.user.inc("win", 1)
				await message.user.inc("gameplay", 1)
				await bot.answerCallbackQuery(query.id, `–ö—É—Ä—Å –ø–æ–¥–µ—à–µ–≤–µ–ª‚§µ –Ω–∞ ${kyrs}.\n‚úÖ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ + ` + sum * 2 + `‚ÇΩ! ${losesmile}`, true);
					}
					if (win == 2, 3) {
						await message.user.inc("buybalance", -sum)
						await message.user.inc("lose", 1)
						await message.user.inc("gameplay", 1)
						await bot.answerCallbackQuery(query.id, `–ö—É—Ä—Å –ø–æ–¥–æ—Ä–æ–∂–∞–ª‚§¥ –Ω–∞ ${kyrs}.\n‚ùå –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ - ` + sum + `‚ÇΩ! ${winsmile}`, true);
							}		
					return bot.sendMessage(message.chat.id, `–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?`, {
						parse_mode: "HTML",
						reply_markup: {
							inline_keyboard: [
								[{ text: "üîÑ –ï—â—ë —Ä–∞–∑", callback_data: "game_trade" }]
							]
						}
					})
	}	

	if (query.data == 'game_case') {
		var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)
		if (!game.statuscase) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		if (message.user.buybalance == 0) return bot.answerCallbackQuery(query.id, '‚ùå –ù–∞ –í–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', true);
		var q =  roundPlus(message.user.buybalance * 0.10)
		var w =  roundPlus(message.user.buybalance * 0.20)
		var e =  roundPlus(message.user.buybalance * 0.35)
		var r =  roundPlus(message.user.buybalance * 0.50)
		var t =  roundPlus(message.user.buybalance * 0.75)
		var y =  roundPlus(message.user.buybalance )
		if (message.user.buybalance <= 0) {
var markup = [["üö´ –û—Ç–º–µ–Ω–∞"]]
		}
		else {
		var markup = [[`${q}`, `${w}`, `${e}`], [`${r}`, `${t}`, `${y}`], ["üö´ –û—Ç–º–µ–Ω–∞"]]
		}
		bot.deleteMessage(message.chat.id, message.message_id);
		state[uid] = 10005
		return bot.sendMessage(message.chat.id, `
<b>üì¶ –ö–µ–π—Å</b>\n

üé≤ –í–∞—à –±–∞–ª–∞–Ω—Å: ${roundPlus(message.user.buybalance)}‚ÇΩ
üí≥ –î–ª—è –≤—ã–≤–æ–¥–∞: ${roundPlus(message.user.outbalance)}‚ÇΩ

<b>üì± –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤—ã–±–µ—Ä–∏—Ç–µ  —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 0.01‚ÇΩ‚ùóÔ∏è</b>
	`, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: markup,
				resize_keyboard: true
			}
		});
	}
	
	if (query.data == 'bonus') {
		var date = new Date();
		let lbd = await User.findOne({id: message.chat.id})
		lbd = lbd.last_bonus_day
		let d = date.getDate()
		if (lbd != d && message.chat.id != 0)
			bot.sendMessage(message.chat.id, '<b>üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n\nüîÑ –°—Ç–∞—Ç—É—Å: ‚úÖ</b>', { parse_mode: "HTML", reply_markup: { inline_keyboard: [[{ text: "üéÅ –ó–∞–±—Ä–∞—Ç—å", callback_data: "takebonus" }]] } });
		else
			bot.sendMessage(message.chat.id, '<b>üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</b>\n\n<b>üîÑ –°—Ç–∞—Ç—É—Å: ‚ùå</b>', { parse_mode: "HTML" });

}

if (query.data == "takebonus") {
	var date = new Date();
	let u = await User.findOne({id: message.chat.id})
	lbd = u.last_bonus_day
	let d = date.getDate()
	if (lbd != d && message.chat.id != 791618646) {
		bot.sendMessage(message.chat.id, `üéÅ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: ${config.bonusday}‚ÇΩ \n\n‚è≥ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ <b>24</b> —á–∞—Å–∞`, { parse_mode: "HTML", replyMarkup: { keyboard: Start, resize_keyboard: true } });
		let isUser5 = await User.findOne({ id: message.chat.id })//—á–∏—Ç–∞–µ–º –±–∞–ª–∞–Ω—Å
		await isUser5.inc("buybalance", config.bonusday)
		await isUser5.inc("bonuscount", 1)
		if (u.bonuscount == 0 && u.ref != 0) {
			var referer = await User.findOne({ id: u.ref })
		//	incField(referer.id, "ref1earnings", config.bonuscount)
		//	incField(referer.ref, "ref2earnings", config.ref2_pay)
			addBal(referer.id, config.refbonus)
		//	addBal(referer.ref, config.ref2_pay)
			bot.sendMessage(referer.id, 'üí≥ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>' + (config.refbonus) + `</b>‚ÇΩ –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ <a href="tg://user?id=${message.chat.id}">—Ä–µ—Ñ–µ—Ä–∞–ª–æ–º</a> –±–æ–Ω—É—Å–∞`, { parse_mode: "HTML" })
		//	bot.sendMessage(referer.ref, 'üí≥ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>' + (config.ref2_pay * 100) + '</b> –∫–æ–ø–µ–µ–∫ –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –Ω–∞ 2 —É—Ä–æ–≤–Ω–µ!', { parseMode: html })
		}
		User.findOneAndUpdate({id: message.chat.id},{last_bonus_day: d}, { upsert: true }, function (err, doc) { });
	}
	else
		bot.sendMessage(message.chat.id, `‚úÖ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å!\n‚ùóÔ∏è –°–ª–µ–¥—É—é—â–∏–π –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞`, { parseMode: 'HTML', replyMarkup: { keyboard: Start, resize_keyboard: true } });

}

if (query.data == 'game_lotterys') {
	var best_count = await BestUser.countDocuments({})
	var fl_count = await FUser.countDocuments({})
	var big_count = await BigUser.countDocuments({})

	return bot.sendMessage(message.chat.id,`
<b>‚òòÔ∏è –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ª–æ—Ç–µ—Ä–µ—è</b>
	
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å –ë–∏–ª–µ—Ç–∞: <b>5‚ÇΩ</b> 
üéÅ –í—ã–∏–≥—Ä—ã—à: <b>45‚ÇΩ</b>
üìÉ –ö—É–ø–ª–µ–Ω–æ –ë–∏–ª–µ—Ç–æ–≤: ${best_count}
üö™ –û—Å—Ç–∞–ª–æ—Å—å –ú–µ—Å—Ç: ${11- best_count}
							
<b>üé≤ –ò–≥—Ä–æ–≤–∞—è –ª–æ—Ç–µ—Ä–µ—è</b>
			
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: <b>10‚ÇΩ</b>
üéÅ –í—ã–∏–≥—Ä—ã—à: <b>50‚ÇΩ</b>
üìÉ –ö—É–ø–ª–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: ${fl_count}
üö™ –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: ${6- fl_count}
	
<b>üî• –ë—ã—Å—Ç—Ä–∞—è –ª–æ—Ç–µ—Ä–µ—è</b>
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å –ë–∏–ª–µ—Ç–∞: <b>25‚ÇΩ</b> 
üéÅ –í—ã–∏–≥—Ä—ã—à: <b>45‚ÇΩ</b>
üìÉ –ö—É–ø–ª–µ–Ω–æ –ë–∏–ª–µ—Ç–æ–≤: ${big_count}
üö™ –û—Å—Ç–∞–ª–æ—Å—å –ú–µ—Å—Ç: ${2- big_count}
	
<b>üé≤ –í–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> ${message.user.buybalance.toFixed(2)}
			
			`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: `–ö—É–ø–∏—Ç—å ‚òòÔ∏è –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ª–æ—Ç–µ—Ä–µ—è `, callback_data: `lottery1` }],
						[{ text: `–ö—É–ø–∏—Ç—å üé≤ –ò–≥—Ä–æ–≤–∞—è –ª–æ—Ç–µ—Ä–µ—è `, callback_data: `lottery2` }],
						[{ text: `–ö—É–ø–∏—Ç—å üî• –ë—ã—Å—Ç—Ä–∞—è –ª–æ—Ç–µ—Ä–µ—è`, callback_data: `lottery3` }]
					]
				}	
			});	
}

if (query.data == "lottery1") {
	var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)

	if (!game.statuslottery) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);

	if ((await BestUser.findOne({ id: message.chat.id })) == null) {
		if (message.user.buybalance < 5)
		bot.editMessageText('‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ! –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ - 5 ‚ÇΩ ', { chat_id: message.chat.id, message_id: message.message_id, parse_mode: "HTML"})
		else {
			await message.user.dec("buybalance", 5)
			var uid1 = (await BestUser.countDocuments({})) + 1
			let player = new BestUser({ id: message.chat.id, username: message.chat.first_name, id1: uid1 })
			await player.save()
			bot.editMessageText(`–í—ã —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ª–æ—Ç–µ—Ä–µ–∏ üçÄ\n\nüí≥ –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç–æ <b>5 ‚ÇΩ </b>\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b> ${message.user.buybalance} </b>\nüìÉ –í–∞—à –Ω–æ–º–µ—Ä: <b>` + uid1 + '</b>\nüö™–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: <b>' + (11 - uid1) + '</b>\n\nüí£ <i>–ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∫—É–ø–ª–µ–Ω 11-–π –±–∏–ª–µ—Ç!</i>', { chat_id: message.chat.id, message_id: message.message_id, parse_mode: "HTML"})

			var players = await BestUser.find({})
			if (players.length < 11 && players.length > 1) {
				for (var i = 0; i < (players.length - 1); i++)
					await bot.sendMessage(players[i].id, 'üìë –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: <b>' + message.chat.first_name + '</b>\nüö™ –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç:  <b>' + (11 - players.length) + '</b>', { parse_mode: "HTML", reply_markup: { keyboard: Start, resize_keyboard: true}}).then().catch()
			}
			else if (players.length >= 11) {
				var players_list = ''
				for (var i = 0; i < players.length; i++)
					players_list += '<b>' + (i + 1) + ')</b> <a href="tg://user?id=' + players[i].id + '">' + players[i].username + '</a>\n'
				var winner = randomInteger(1, 11)
				winner = await BestUser.findOne({ id1: winner })
				for (var i = 0; i < players.length; i++)
				try {
					await bot.sendMessage(players[i].id, '–í –õ–æ—Ç–µ—Ä–µ–µ \n\nüéÅ –í—ã–∏–≥—Ä–∞–ª üéü <b>‚Ññ' + winner.id1 + '</b>\n\nüìÉ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n' + players_list + '\nüéÅ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å <b>' + winner.username + '</b> –ø–æ–ª—É—á–∞–µ—Ç <b>45 ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞</b>!', { parse_mode: "HTML", reply_markup: { keyboard: Start, resize_keyboard: true}}).then().catch()
				addoutBal(winner.id, 45 /2)
				await BestUser.remove({})
				}
				catch { }
			}
		}
	} else
		bot.sendMessage(message.chat.id, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ!', { parse_mode: "HTML", reply_markup: { keyboard: Start, resize_keyboard: true}})
}

if (query.data == "lottery2") {
	var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)

	if (!game.statuslottery) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);

	if ((await FUser.findOne({ id: message.chat.id })) == null) {
		if (message.user.buybalance < 10)
		bot.editMessageText('‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ! –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ - 10 ‚ÇΩ ', { chat_id: message.chat.id, message_id: message.message_id, parse_mode: "HTML"})
		else {
			await message.user.dec("buybalance", 10)
			var uid1 = (await FUser.countDocuments({})) + 1
			let player = new FUser({ id: message.chat.id, username: message.chat.first_name, id1: uid1 })
			await player.save()
			bot.editMessageText(`–í—ã —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ª–æ—Ç–µ—Ä–µ–∏ üçÄ\n\nüí≥ –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç–æ <b>10 ‚ÇΩ </b>\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b> ${message.user.buybalance} </b>\nüìÉ –í–∞—à –Ω–æ–º–µ—Ä: <b>` + uid1 + '</b>\nüö™–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: <b>' + (6 - uid1) + '</b>\n\nüí£ <i>–ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∫—É–ø–ª–µ–Ω 6-–π –±–∏–ª–µ—Ç!</i>', { chat_id: message.chat.id, message_id: message.message_id, parse_mode: "HTML"})

			var players = await FUser.find({})
			if (players.length < 6 && players.length > 1) {
				for (var i = 0; i < (players.length - 1); i++)
					await bot.sendMessage(players[i].id, 'üìë –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: <b>' + message.chat.first_name + '</b>\nüö™ –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç:  <b>' + (6 - players.length) + '</b>', { parse_mode: "HTML", reply_markup: { keyboard: Start, resize_keyboard: true}}).then().catch()
			}
			else if (players.length >= 6) {
				var players_list = ''
				for (var i = 0; i < players.length; i++)
					players_list += '<b>' + (i + 1) + ')</b> <a href="tg://user?id=' + players[i].id + '">' + players[i].username + '</a>\n'
				var winner = randomInteger(1, 6)
				winner = await FUser.findOne({ id1: winner })
				for (var i = 0; i < players.length; i++)
				try {
					await bot.sendMessage(players[i].id, '–í –õ–æ—Ç–µ—Ä–µ–µ \n\nüéÅ –í—ã–∏–≥—Ä–∞–ª üéü <b>‚Ññ' + winner.id1 + '</b>\n\nüìÉ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n' + players_list + '\nüéÅ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å <b>' + winner.username + '</b> –ø–æ–ª—É—á–∞–µ—Ç <b>50 ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞</b>!', { parse_mode: "HTML", reply_markup: { keyboard: Start, resize_keyboard: true}}).then().catch()
				addoutBal(winner.id, 50 /2)
				await FUser.remove({})
				}
				catch { }
			}
		}
	} else
		bot.sendMessage(message.chat.id, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ!', { parse_mode: "HTML", reply_markup: { keyboard: Start, resize_keyboard: true}})
}

if (query.data == "lottery3") {
	var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)

	if (!game.statuslottery) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);

	if ((await BigUser.findOne({ id: message.chat.id })) == null) {
		if (message.user.buybalance < 25)
		bot.editMessageText('‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ! –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ - 25 ‚ÇΩ ', { chat_id: message.chat.id, message_id: message.message_id, parse_mode: "HTML"})
		else {
			await message.user.dec("buybalance", 25)
			var uid1 = (await BigUser.countDocuments({})) + 1
			let player = new BigUser({ id: message.chat.id, username: message.chat.first_name, id1: uid1 })
			await player.save()
			bot.editMessageText(`–í—ã —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ª–æ—Ç–µ—Ä–µ–∏ üçÄ\n\nüí≥ –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç–æ <b>25 ‚ÇΩ </b>\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b> ${message.user.buybalance} </b>\nüìÉ –í–∞—à –Ω–æ–º–µ—Ä: <b>` + uid1 + '</b>\nüö™–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: <b>' + (2 - uid1) + '</b>\n\nüí£ <i>–ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∫—É–ø–ª–µ–Ω 2-–π –±–∏–ª–µ—Ç!</i>', { chat_id: message.chat.id, message_id: message.message_id, parse_mode: "HTML"})

			var players = await BigUser.find({})
			if (players.length < 2 && players.length > 1) {
				for (var i = 0; i < (players.length - 1); i++)
					await bot.sendMessage(players[i].id, 'üìë –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: <b>' + message.chat.first_name + '</b>\nüö™ –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç:  <b>' + (2 - players.length) + '</b>', { parse_mode: "HTML", reply_markup: { keyboard: Start, resize_keyboard: true}}).then().catch()
			}
			else if (players.length >= 2) {
				var players_list = ''
				for (var i = 0; i < players.length; i++)
					players_list += '<b>' + (i + 1) + ')</b> <a href="tg://user?id=' + players[i].id + '">' + players[i].username + '</a>\n'
				var winner = randomInteger(1, 2)
				winner = await BigUser.findOne({ id1: winner })
				for (var i = 0; i < players.length; i++)
				try {
					await bot.sendMessage(players[i].id, '–í –õ–æ—Ç–µ—Ä–µ–µ \n\nüéÅ –í—ã–∏–≥—Ä–∞–ª üéü <b>‚Ññ' + winner.id1 + '</b>\n\nüìÉ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n' + players_list + '\nüéÅ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å <b>' + winner.username + '</b> –ø–æ–ª—É—á–∞–µ—Ç <b>45 ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞</b>!', { parse_mode: "HTML", reply_markup: { keyboard: Start, resize_keyboard: true}}).then().catch()
				addoutBal(winner.id, 45 /2)
				await BigUser.remove({})
				}
				catch { }
			}
		}
	} else
		bot.sendMessage(message.chat.id, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ!', { parse_mode: "HTML", reply_markup: { keyboard: Start, resize_keyboard: true}})
}

	if (query.data == 'withdraw') {
//		if (message.user.buybalance < 0) return bot.answerCallbackQuery(query.id, 'üö´ –î–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–≥–∞—Å–∏—Ç–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫, –Ω–∞–∫—Ä—É—Ç—á–∏–∫ –µ–±–∞–Ω–Ω—ã–π!', true);
//		if (message.user.outbalance < 0) return bot.answerCallbackQuery(query.id, 'üö´ –î–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–≥–∞—Å–∏—Ç–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞, –Ω–∞–∫—Ä—É—Ç—á–∏–∫ –µ–±–∞–Ω–Ω—ã–π!', true);
		if (message.user.outbalance < config.minpay) return bot.answerCallbackQuery(query.id, 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: '+ config.minpay +'‚ÇΩ', true);
		bot.deleteMessage(message.chat.id, message.message_id);

		await message.user.set('menu', 'qiwi');
		await bot.sendMessage(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∏–ª–∏ Payeer –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:\n–ù–∞–ø—Ä–∏–º–µ—Ä: +79001234567 –∏–ª–∏ P123456789', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}

	if (query.data.startsWith('withdraw:')) {
		let id = Number(query.data.split('withdraw:')[1]);
		let ticket = await Ticket.findOne({ id });

		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);
		bot.sendMessage("@playgame_money", `üí≥ <a href="tg://user?id=${ticket.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a> –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ <b>${ticket.amount}‚ÇΩ</b>`, { parse_mode: "HTML" })

		if (ticket.wallet.indexOf("P") == -1) { // –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ QIWI
			qiwi.toWallet({ account: String(ticket.wallet), amount: ticket.amount, comment: '–í—ã–ø–ª–∞—Ç–∞ –æ—Ç @PlayGoldBot' }, () => { });
		}
		else // –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ Payeer
		{
			require('request')({
				method: 'POST',
				url: 'https://payeer.com/ajax/api/api.php',
				headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
				body: `account=${config.payeer.account}&apiId=${config.payeer.apiId}&apiPass=${config.payeer.apiPass}&action=transfer&curIn=RUB&sum=${ticket.amount * 1.01}&curOut=RUB&to=${ticket.wallet}`
			}, async function (error, response, body) {
				body = JSON.parse(body)
			})
		}

		bot.sendMessage(ticket.id, `‚úÖ <b>–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞</b>
üí∏ –ù–∞ –í–∞—à ${ticket.wallet.indexOf("P") == -1 ? "QIWI" : "Payeer"} –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>${ticket.amount}‚ÇΩ</b>\n

üôè –ë—É–¥–µ–º –æ—á–µ–Ω—å –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã –∑–∞ –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ –∞–¥–º–∏–Ω—É –∏–ª–∏ –≤ —á–∞—Ç
‚ò∫Ô∏è –î–ª—è –Ω–∞—Å —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ\n
ü§ù <b>–†–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å!</b>
`, {
			parse_mode: "html"
		});
		await User.findOneAndUpdate({ id: 0 }, { $inc: { fc: ticket.amount } })
		await User.findOneAndUpdate({ id: 2 }, { $inc: { deposit: -ticket.amount } })
		await User.findOneAndUpdate({ id: id }, { $inc: { payout: ticket.amount } })
		await ticket.remove();
		bot.editMessageText('–í—ã–ø–ª–∞—Ç–∏–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if (query.data.startsWith('back:')) {
		let id = Number(query.data.split('back:')[1]);
		let ticket = await Ticket.findOne({ id });

		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);

		let user = await User.findOne({ id: ticket.id });
		bot.sendMessage(ticket.id, `–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –Ω–∞ –≤–∞—à —Å—á—ë—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${ticket.amount}‚ÇΩ`);

		await user.inc('buybalance', ticket.amount);
		await User.findOneAndUpdate({ id: 2 }, { $inc: { deposit: -ticket.amount } })
		await ticket.remove();

		return bot.editMessageText('–í–µ—Ä–Ω—É–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if (query.data.startsWith('take:')) {
		let id = Number(query.data.split('take:')[1]);
		let ticket = await Ticket.findOne({ id });

		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);

		await ticket.remove();
		return bot.editMessageText('–ó–∞–±—Ä–∞–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}
	var d = query.data

	if (ADMINS.indexOf(query.from.id) !== -1) {
		if (d == "admin_mm") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n<i>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –≤ —Ä–∞—Å—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:</i>\n# –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ # http://t.me/link #', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7770
		} else if (d == "admin_w") {
			bot.deleteMessage(message.chat.id, message.message_id);
			let tickets = await Ticket.find();
			if (tickets.length == 0) return bot.sendMessage(uid, '–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ—Ç');
			await tickets.map((x) => {
				bot.sendMessage(uid, `üìù –ò–≥—Ä–æ–∫: <a href="tg://user?id=${x.id}">–ò–≥—Ä–æ–∫</a> (ID: <code>${x.id}</code>)\n
	üí∞ –°—É–º–º–∞: <code>${x.amount}</code>‚ÇΩ
	ü•ù –ö–æ—à–µ–ª—ë–∫: <code>${x.wallet}</code>`, {
					parse_mode: "HTML", reply_markup: { inline_keyboard: [[{ text: 'üì≠ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É', callback_data: `withdraw:${x.id}` }], [{ text: '‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å', callback_data: `back:${x.id}` }], [{ text: 'üö´ –ó–∞–±—Ä–∞—Ç—å', callback_data: `take:${x.id}` }]] }
				});
			});
		}
//{"statuschest":false,"statusroulet":false,"statuskoleso":false,"statusmins":false,"statusorel":false,"statusstakan":false,"statuskyrs":false,"statustakan":false,"statusstsakan":true,"statuslottery":false,"statuscase": false}
		else if (d.startsWith("admin_games")) {
			bot.deleteMessage(message.chat.id, message.message_id);
			var game = JSON.parse((await Gamestat.findOne({ id: 1 })).statusgame)
			if (d.split("_")[2] == "falsechest") game.statuschest = false
			if (d.split("_")[2] == "truechest") game.statuschest = true

			if (d.split("_")[2] == "falseroulet") game.statusroulet = false
			if (d.split("_")[2] == "trueroulet") game.statusroulet = true

			if (d.split("_")[2] == "falsekoleso") game.statuskoleso = false
			if (d.split("_")[2] == "truekoleso") game.statuskoleso = true

			if (d.split("_")[2] == "falsemins") game.statusmins = false
			if (d.split("_")[2] == "truemins") game.statusmins = true

			if (d.split("_")[2] == "falseorel") game.statusorel = false
			if (d.split("_")[2] == "trueorel") game.statusorel = true

			if (d.split("_")[2] == "falsestakan") game.statusstakan = false
			if (d.split("_")[2] == "truestakan") game.statusstakan = true

			if (d.split("_")[2] == "falselottery") game.statuslottery = false
			if (d.split("_")[2] == "truelottery") game.statuslottery = true

			if (d.split("_")[2] == "falsekyrs") game.statuskyrs = false
			if (d.split("_")[2] == "truekyrs") game.statuskyrs = true

			if (d.split("_")[2] == "falsecase") game.statuscase = false
			if (d.split("_")[2] == "truecase") game.statuscase = true
			await Gamestat.updateOne({ id: 1, statusgame: JSON.stringify(game) })
			console.log(game)
			bot.sendMessage(uid, `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä:\n
–°—É–Ω–¥—É–∫: ${game.statuschest ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "üö´ –í—ã–∫–ª—é—á–µ–Ω–æ"}
–†—É–ª–µ—Ç–∫–∞: ${game.statusroulet ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "üö´ –í—ã–∫–ª—é—á–µ–Ω–æ"}
–ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã: ${game.statuskoleso ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "üö´ –í—ã–∫–ª—é—á–µ–Ω–æ"}
–ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ: ${game.statusmins ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "üö´ –í—ã–∫–ª—é—á–µ–Ω–æ"}
–û—Ä–µ–ª –∏ –†–µ—à–∫–∞: ${game.statusorel ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "üö´ –í—ã–∫–ª—é—á–µ–Ω–æ"}
–°—Ç–∞–∫–∞–Ω: ${game.statusstakan ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "üö´ –í—ã–∫–ª—é—á–µ–Ω–æ"}
–ö—É—Ä—Å: ${game.statuskyrs ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "üö´ –í—ã–∫–ª—é—á–µ–Ω–æ"}
–ö–µ–π—Å: ${game.statuscase ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "üö´ –í—ã–∫–ª—é—á–µ–Ω–æ"}
–õ–æ—Ç—Ç–µ—Ä–µ–∏: ${game.statuslottery ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "üö´ –í—ã–∫–ª—é—á–µ–Ω–æ"}
`, {
				reply_markup: {
					inline_keyboard: [
						[{ text: (game.statuschest ? '–í—ã–∫–ª—é—á–∏—Ç—å —Å—É–Ω–¥—É–∫–∏' : "–í–∫–ª—é—á–∏—Ç—å —Å—É–Ω–¥—É–∫–∏"), callback_data: (game.statuschest ? 'admin_games_falsechest' : "admin_games_truechest") }],
						[{ text: (game.statusroulet ? '–í—ã–∫–ª—é—á–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É' : "–í–∫–ª—é—á–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É"), callback_data: (game.statusroulet ? 'admin_games_falseroulet' : "admin_games_trueroulet") }],
						[{ text: (game.statuskoleso ? '–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã' : "–í–∫–ª—é—á–∏—Ç—å –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã"), callback_data: (game.statuskoleso ? 'admin_games_falsekoleso' : "admin_games_truekoleso") }],
						[{ text: (game.statusmins ? '–í—ã–∫–ª—é—á–∏—Ç—å –º–∏–Ω—ã' : "–í–∫–ª—é—á–∏—Ç—å –º–∏–Ω—ã"), callback_data: (game.statusmins ? 'admin_games_falsemins' : "admin_games_truemins") }],
						[{ text: (game.statusorel ? '–í—ã–∫–ª—é—á–∏—Ç—å –æ—Ä–µ–ª –∏ —Ä–µ—à–∫–∞ ' : "–í–∫–ª—é—á–∏—Ç—å –û—Ä–ª–∞ –∏ –†–µ—à–∫—É"), callback_data: (game.statusorel ? 'admin_games_falseorel' : "admin_games_trueorel") }],
						[{ text: (game.statusstakan ? '–í—ã–∫–ª—é—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω ' : "–í–∫–ª—é—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω"), callback_data: (game.statusstakan ? 'admin_games_falsestakan' : "admin_games_truestakan") }],
						[{ text: (game.statuskyrs ? '–í—ã–∫–ª—é—á–∏—Ç—å –∫—É—Ä—Å ' : "–í–∫–ª—é—á–∏—Ç—å –∫—É—Ä—Å"), callback_data: (game.statuskyrs ? 'admin_games_falsekyrs' : "admin_games_truekyrs") }],
						[{ text: (game.statuslottery ? '–í—ã–∫–ª—é—á–∏—Ç—å –ª–æ—Ç—Ç–µ—Ä–µ–∏ ' : "–í–∫–ª—é—á–∏—Ç—å –ª–æ—Ç—Ç–µ—Ä–µ–∏"), callback_data: (game.statuslottery ? 'admin_games_falselottery' : "admin_games_truelottery") }],
						[{ text: (game.statuscase ? '–í—ã–∫–ª—é—á–∏—Ç—å –∫–µ–π—Å ' : "–í–∫–ª—é—á–∏—Ç—å –∫–µ–π—Å"), callback_data: (game.statuscase ? 'admin_games_falsecase' : "admin_games_truecase") }],
						[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }],
					]
				}, parse_mode: "HTML"
			})
		}		

		else if (d == "admin_top") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var u = await User.find({ ref: { $ne: 0 }, _id: { $gt: mongo.Types.ObjectId.createFromTime(Date.now() / 1000 - 24 * 60 * 60) } })
			console.log(u)
			var top = []
			u.map((e) => {
				var t = top.filter(u => { if (e.ref == u.id) return true; else return false })
				if (t.length == 0) top.push({ id: e.ref, ref: 1 })
				else {
					top = top.filter(u => { if (e.ref == u.id) return false; else return true })
					top.push({ id: e.ref, ref: t[0].ref + 1 })
				}
			})
			top = top.sort((a, b) => { if (a.ref <= b.ref) return 1; else return -1 })
			top.length = 20
			var str = `<b>üïí –¢–æ–ø –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∑–∞ 24 —á–∞—Å–∞:</b>\n\n`
			for (const i in top) {
				var us = await User.findOne({ id: top[i].id })
				str += `<b>${Number(i) + 1})</b> <a href="tg://user?id=${us.id}">${us.name ? us.name : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${top[i].ref}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`
			}
			bot.sendMessage(uid, str, { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }]] }, parse_mode: "HTML" })
		}
		else if (d == "admin_b") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ % –¥–ª—è –±–æ–Ω—É—Å–∞ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –∏–ª–∏ 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7771
		}

		else if (d == "admin_u") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7772
		}
		else if (d.split("_")[0] == "addBuyBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7773
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "addOutBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7774
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "addPayIns") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 777455
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "addPayOuts") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É–º–º—É –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 77745555
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editBuyBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7775
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editOutBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7776
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editPayIns") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 777655
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editPayOuts") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 77765555
			data[uid] = d.split("_")[1]
		}
		else if (d == "a_voucherpromo") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í—ã–±–µ—Ä–∏ –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ', { reply_markup: RM_promo, parse_mode: "HTML" })
		}
		else if (d == "voucherbuy") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–≤–µ–¥–∏ —Å—É–º–º—É', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 99999
		}
		else if (d == "voucherout") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–≤–µ–¥–∏ —Å—É–º–º—É', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 10000
		}

		else if (d == "admin_mm_stop") {
			var tek = Math.round((mm_i / mm_total) * 40)
			var str = ""
			for (var i = 0; i < tek; i++) str += "+"
			str += '>'
			for (var i = tek + 1; i < 41; i++) str += "-"
			mm_status = false;
			bot.editMessageText("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", { chat_id: mm_achatid, message_id: mm_amsgid })
			mm_u = []
		}
		else if (d == "admin_mm_pause") {
			var tek = Math.round((mm_i / mm_total) * 40)
			var str = ""
			for (var i = 0; i < tek; i++) str += "+"
			str += '>'
			for (var i = tek + 1; i < 41; i++) str += "-"
			bot.editMessageText("<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n' + str + "\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n<b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_err, { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm2, parse_mode: html })
			mm_status = false;
		}
		else if (d == "admin_mm_play") {
			mm_status = true;
			bot.editMessageText("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n', { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm1 })
		}
		else if (d.split("_")[0] == "ban") {
			var uuid = Number(d.split("_")[1])
			await User.findOneAndUpdate({ id: uuid }, { ban: true })
			bot.editMessageText('<a href="tg://user?id=' + uuid + '">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', { chat_id: uid, message_id: message.message_id, parse_mode: html })
		}
		else if (d.split("_")[0] == "unban") {
			var uuid = Number(d.split("_")[1])
			await User.findOneAndUpdate({ id: uuid }, { ban: false })
			bot.editMessageText('<a href="tg://user?id=' + uuid + '">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> —Ä–∞–∑–±–∞–Ω–µ–Ω!', { chat_id: uid, message_id: message.message_id, parse_mode: html })
		}
		else if (d == "admin_return") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var h = process.uptime() / 3600 ^ 0
			var m = (process.uptime() - h * 3600) / 60 ^ 0
			var s = process.uptime() - h * 3600 - m * 60 ^ 0
			var heap = process.memoryUsage().rss / 1048576 ^ 0
			var b = (await User.findOne({ id: 0 })).deposit
			return qiwi.getBalance(async (err, balance) => {
				bot.sendMessage(uid, '<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n<b>–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:</b> ' + h + ' —á–∞—Å–æ–≤ ' + m + ' –º–∏–Ω—É—Ç ' + s + ' —Å–µ–∫—É–Ω–¥\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: </b>' + (await User.countDocuments({})) + '\n<b>–ü–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> ' + heap + "–ú–ë\n<b>–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:</b> " + await Ticket.countDocuments() + "\n<b>–ë–∞–ª–∞–Ω—Å QIWI:</b> " + balance.accounts[0].balance.amount + "‚ÇΩ\n<b>–ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é:</b> " + b + "%", { parse_mode: "HTML", reply_markup: RM_admin })
			})
		}
		else if (d == "admin_finanses") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var exp = (await User.findOne({ id: 2 })).deposit
			var out = (await User.findOne({ id: 0 })).fc
			var dep = (await User.findOne({ id: 0 })).ref
			return qiwi.getBalance(async (err, balance) => {
			bot.sendMessage(uid, '<b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>\n\n<b>–û–∂–∏–¥–∞—é—Ç:</b> ' + exp + ' ‚ÇΩ\n<b>–í—ã–ø–ª–∞—á–µ–Ω–æ: </b>' + out + ' ‚ÇΩ\n<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–æ:</b> ' + dep + ' ‚ÇΩ\n<b>–ë–∞–ª–∞–Ω—Å Qiwi:</b> ' + balance.accounts[0].balance.amount + " ‚ÇΩ", { 
				parse_mode: "HTML", 
				reply_markup: {
				inline_keyboard: [
					[{ text: "üí∞ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π", callback_data: "admin_deposit" }]
				]
			}})
		})
		}
		else if (d == "admin_deposit") {
			bot.deleteMessage(message.chat.id, message.message_id)
			var time = new Date()
			time.setHours(0, 0, 0, 0)
			var todayStartTime = time.getTime()
			var weekStartTime = getMonday(new Date()).getTime()
			time = new Date()
			time.setDate(0)
			var monthStartTime = time.getTime()
		  try { var sumAllTime = (await Deposit.aggregate([{ $match: {}, }, { $group: { _id: null, total: { $sum: "$amount" } } }], (e) => { }))[0].total } catch { var sumAllTime = 0 } 
		  try { var sumToday = (await Deposit.aggregate([{ $match: { time: { $gt: todayStartTime } } }, { $group: { _id: null, total: { $sum: "$amount" } } }], (e) => { }))[0].total } catch { var sumToday = 0 }
			try { var sumThisWeek = (await Deposit.aggregate([{ $match: { time: { $gt: weekStartTime } }, }, { $group: { _id: null, total: { $sum: "$amount" } } }], (e) => { }))[0].total } catch { var sumThisWeek = 0 }
			try { var sumThisMonth = (await Deposit.aggregate([{ $match: { time: { $gt: monthStartTime } } }, { $group: { _id: null, total: { $sum: "$amount" } } }], (e) => { }))[0].total } catch { var sumThisMonth = 0 }
			var lastTx = await Deposit.find({}).sort({ time: -1 }).limit(10) 
			bot.sendMessage(uid, `
<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:</b>\n
<b>–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:</b> ${await Deposit.countDocuments({})} –Ω–∞ ${sumAllTime}‚ÇΩ
<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b> ${await Deposit.countDocuments({ time: { $gt: todayStartTime } })} –Ω–∞ ${sumToday}‚ÇΩ
<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:</b> ${await Deposit.countDocuments({ time: { $gt: weekStartTime } })} –Ω–∞ ${sumThisWeek}‚ÇΩ
<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b> ${await Deposit.countDocuments({ time: { $gt: monthStartTime } })} –Ω–∞ ${sumThisMonth}‚ÇΩ\n
<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:</b>
${lastTx.map((o) => { return `<b>${o.amount}‚ÇΩ</b> - <a href="tg://user?id=${o.creator_id}">${o.creator_id}</a> - <i>${o.txnId}</i>` }).join("\n")}
			`, { parse_mode: "HTML" });
		}
		else if (d == "admin_parametr") {
			var params = await Config.find()
			bot.editMessageText(`<b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞:</b>\n\n${params.map((o) => { return `<code>${o.parameter}</code> - ${o.value} - <i>${o.description}</i>` }).join("\n")}`, { 
				chat_id: uid, 
				message_id: message.message_id, 
				parse_mode: html, 
				webPreview: false,
				reply_markup: {
					inline_keyboard: [
						[{ text: "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data: "admin_setparametrs" }],
						[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }]
					]
				}
			})
		}
		else if (d == "admin_setparametrs") {
			bot.deleteMessage(message.chat.id, message.message_id)
			bot.sendMessage(uid, "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–∫–ª—é—á = –∑–Ω–∞—á–µ–Ω–∏–µ</i>:", { reply_markup: RM_admin_return, parse_mode: html })
			state[uid] = 10001
		}
	}
});

var state = []


User.prototype.inc = function (field, value = 1) {
	this[field] += value;
	return this.save();
}

User.prototype.dec = function (field, value = 1) {
	this[field] -= value;
	return this.save();
}

User.prototype.set = function (field, value) {
	this[field] = value;
	return this.save();
}


setInterval(async () => {
	qiwi.getOperationHistory({ rows: 10, operation: 'IN' }, (err, response) => {
		response.data.map(async (x) => {
			if (!x.comment) return;
			if (txnId.indexOf(x.txnId) !== -1) return;
			if (x.comment.startsWith('gamegld')) {
				let id = Number(x.comment.split("gamegld")[1]);
				let user = await User.findOne({ id });
				if (!user) return;
				await user.inc('game_payin', x.sum.amount);
				await user.inc('buybalance', x.sum.amount);
				await bot.sendMessage(id, `üí≥ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ ${x.sum.amount}‚ÇΩ`);
				bot.sendMessage("@viplatu_marvel", `üéñÔ∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b>`, { parse_mode: "HTML" })
				txnId.push(x.txnId)
				require('fs').writeFileSync('./txnId.json', JSON.stringify(txnId));
				return
			}
			let id = Number(x.comment.split("gamebot")[1]);
			if (!id) return;
			let user = await User.findOne({ id });
			if (!user) return;
			if (x.sum.currency != 643) return;
			var b = (await User.findOne({ id: 0 })).deposit
			var sum = x.sum.amount
/*
			if (b > 0) {
				await user.inc('deposit', x.sum.amount);
				await user.inc('buybalance', x.sum.amount + x.sum.amount * b);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				await (new Deposit({ creator_id: id, amount: x.sum.amount, time: (new Date()).getTime(), txnId: x.txnId })).save()
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ –∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(x.sum.amount * b)}‚ÇΩ!`);
			//	bot.sendMessage("@viplatu_marvel", `üéñÔ∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b> –∏ –ø–æ–ª—É—á–∏–ª ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å–æ–º —á–µ—Ä–µ–∑ <b>QIWI</b>`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ + ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å`, { parse_mode: "HTML" }))

			} */
			if (b == 0) {
				await user.inc('deposit', x.sum.amount);
				await user.inc('buybalance', x.sum.amount);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				await (new Deposit({ creator_id: id, amount: x.sum.amount, time: (new Date()).getTime(), txnId: x.txnId })).save()
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ`);
			//	bot.sendMessage("@viplatu_marvel", `üéñÔ∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b> —á–µ—Ä–µ–∑ <b>QIWI</b>`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ`, { parse_mode: "HTML" }))
			} else {
				await user.inc('deposit', x.sum.amount);
				b = b / 100
				await user.inc('buybalance', x.sum.amount + x.sum.amount * b);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				await (new Deposit({ creator_id: id, amount: x.sum.amount, time: (new Date()).getTime(), txnId: x.txnId })).save()
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ –∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(x.sum.amount * b)}‚ÇΩ!`);
			//	bot.sendMessage("@viplatu_marvel", `üéñÔ∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b> –∏ –ø–æ–ª—É—á–∏–ª ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å–æ–º  —á–µ—Ä–µ–∑ <b>QIWI</b>`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ + ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å`, { parse_mode: "HTML" }))

			}
			await User.findOneAndUpdate({ id: user.ref }, { $inc: { buybalance: roundPlus(x.sum.amount * 0.05) } })

			bot.sendMessage(user.ref, `üí∞ –í–∞—à <a href="tg://user?id=${id}">–ø–∞—Ä—Ç–Ω—ë—Ä</a> –ø–æ–ø–æ–ª–Ω–∏–ª —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b>!\nüé≤ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>${roundPlus(x.sum.amount * 0.05)}‚ÇΩ</b> –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å`, { parse_mode: "HTML" }).catch()

			txnId.push(x.txnId)
			require('fs').writeFileSync('./txnId.json', JSON.stringify(txnId));
		});
	});
}, 10000);

async function mmTick() {
	if (mm_status) {
		try {
			mm_i++
			if (mm_type == "text") {
				if (mm_btn_status)
					bot.sendMessage(mm_u[mm_i - 1], mm_text, { reply_markup: { inline_keyboard: [[{ text: mm_btn_text, url: mm_btn_link }]] }, parse_mode: html }).then((err) => { mm_ok++ }).catch((err) => { mm_err++ })
				else
					bot.sendMessage(mm_u[mm_i - 1], mm_text, { parse_mode: html }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { mm_err++ })
			}
			else if (mm_type == "img") {
				if (mm_btn_status)
					bot.sendPhoto(mm_u[mm_i - 1], mm_imgid, { caption: mm_text, reply_markup: { inline_keyboard: [[{ text: mm_btn_text, url: mm_btn_link }]] } }).then((err) => { mm_ok++ }).catch((err) => { mm_err++ })
				else
					bot.sendPhoto(mm_u[mm_i - 1], mm_imgid, { caption: mm_text }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { mm_err++ })
			}
			if (mm_i % 10 == 0) {
				var tek = Math.round((mm_i / mm_total) * 40)
				var str = ""
				for (var i = 0; i < tek; i++) str += "+"
				str += '>'
				for (var i = tek + 1; i < 41; i++) str += "-"
				bot.editMessageText("<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n' + str + "\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n<b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_err, { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm1, parse_mode: html })
			}
			if (mm_i == mm_total) {
				mm_status = false;
				bot.editMessageText("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total, { chat_id: mm_achatid, message_id: mm_amsgid })
				sendAdmins('<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–£—Å–ø–µ—à–Ω–æ:</b> ' + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω–æ:</b> " + mm_err, { parse_mode: html })
				mm_u = []
			}
		} finally { }
	}
}

setInterval(mmTick, 100);

var mm_total
var mm_i
var mm_status = false
var mm_amsgid
var mm_type
var mm_imgid
var mm_text
var mm_achatid
var mm_btn_status
var mm_btn_text
var mm_btn_link
var mm_ok
var mm_err

async function mm_t(text, amsgid, achatid, btn_status, btn_text, btn_link, size) {
	let ut = await User.find({}, { id: 1 }).sort({ _id: -1 })
	mm_total = ut.length
	console.log(ut)
	mm_u = []
	for (var i = 0; i < mm_total; i++)
		mm_u[i] = ut[i].id
	if (size != 100) {
		mm_u = randomizeArr(mm_u)
		mm_total = Math.ceil(mm_total * (size / 100))
		mm_u.length = mm_total
	}
	ut = undefined
	mm_i = 0;
	mm_amsgid = amsgid
	mm_type = "text"
	mm_text = text
	mm_ok = 0
	mm_err = 0
	mm_achatid = achatid
	if (btn_status) {
		mm_btn_status = true
		mm_btn_text = btn_text
		mm_btn_link = btn_link
	}
	else
		mm_btn_status = false
	mm_status = true;
}

bot.on('photo', async msg => {
	if (msg.from != undefined) {
		var uid = msg.from.id
		if (state[uid] == 7770 && ADMINS.indexOf(uid) !== -1) {
			state[uid] = undefined
			var text = ""
			if (msg.caption != undefined) text = msg.caption
			bot.sendMessage(uid, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!").then((e) => {
				if (text.split("#").length == 4) {
					var btn_text = text.split("#")[1].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
					var btn_link = text.split("#")[2].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
					text = text.split("#")[0].replace(/(^\s*)|(\s*)$/g, '').replace(' ', '')
					mm_img(msg.photo[msg.photo.length - 1].file_id, text, e.message_id, e.chat.id, true, btn_text, btn_link, 100)

				}
				else
					mm_img(msg.photo[msg.photo.length - 1].file_id, text, e.message_id, e.chat.id, false, false, false, 100)

			})
		}
	}
})



async function mm_img(img, text, amsgid, achatid, btn_status, btn_text, btn_link, size) {
	let ut = await User.find({}, { id: 1 }).sort({ _id: -1 })
	mm_total = ut.length
	mm_u = []
	for (var i = 0; i < mm_total; i++)
		mm_u[i] = ut[i].id
	if (size != 100) {
		mm_u = randomizeArr(mm_u)
		mm_total = Math.ceil(mm_total * (size / 100))
		mm_u.length = mm_total
	}

	ut = undefined
	mm_i = 0;
	mm_amsgid = amsgid
	mm_type = "img"
	mm_text = text
	mm_imgid = img
	mm_ok = 0
	mm_err = 0
	mm_achatid = achatid
	if (btn_status) {
		mm_btn_status = true
		mm_btn_text = btn_text
		mm_btn_link = btn_link
	}
	else
		mm_btn_status = false
	mm_status = true;
}

function randomizeArr(arr) {
	var j, temp;
	for (var i = arr.length - 1; i > 0; i--) {
		j = Math.floor(Math.random() * (i + 1));
		temp = arr[j];
		arr[j] = arr[i];
		arr[i] = temp;
	}
	return arr;
}

const html = "HTML"

function sendAdmins(text, params) { for (var i = 0; i < ADMINS.length; i++) bot.sendMessage(ADMINS[i], text, params) }

var data = []


function roundPlus(number) { if (isNaN(number)) return false; var m = Math.pow(10, 2); return Math.round(number * m) / m; }

async function main() {
	var u = (await User.find({}, { id: 1 })).map((e) => { return e.id })
	for (var i in u) {
		await User.findOneAndUpdate({ id: u[i] }, { refCount: await User.countDocuments({ ref: u[i] }) })
		console.log(i)
	}

}
//main()




//User.updateMany({}, {payout: 0, not: false}).then()

async function totalEarnCalc() {
	var users = await User.find()
	for (const i in users) {
		try {
			var user = users[i]
			let total_earn = 0;
			user.trees.map((x) => {
				total_earn += trees.find((a) => a.id == x.id).earn
			})
			await User.findOneAndUpdate({ id: user.id }, { totalEarn: total_earn })
			console.log(i + "/" + users.length + " - " + total_earn)
		}
		catch { }
	}
}
setInterval(totalEarnCalc, 1000 * 60 * 15)



async function ticker() {
	var d = new Date()
	var minutes = d.getMinutes()
	var hours = d.getHours()
	var date = d.getDate()
	if (minutes == 0 && hours == 0 && (date == 5 || date == 15 || date == 25))
		clanWar()
	if (minutes == 0 && hours == 0)
		await User.updateMany({}, { game_limit: 5, spinsToday: 0 })
}

setInterval(ticker, 1000 * 60)

function randomizeArr(arr) {
	var j, temp;
	for (var i = arr.length - 1; i > 0; i--) {
		j = Math.floor(Math.random() * (i + 1));
		temp = arr[j];
		arr[j] = arr[i];
		arr[i] = temp;
	}
	return arr;
}

function randomInteger(min, max) {
	// —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç min –¥–æ (max+1)
	let rand = min + Math.random() * (max + 1 - min);
	return Math.floor(rand);
}

initConfig()

async function initConfig() {
    var cfg = await Config.find()
    cfg.map((o) => { config[o.parameter] = o.value; console.log(`Parameter ${o.parameter} setted to ${o.value}`) })
}

function getMonday(d) {
    d = new Date(d);
    var day = d.getDay(),
        diff = d.getDate() - day + (day == 0 ? -6 : 1); // adjust when day is sunday
    d.setDate(diff)
    d.setHours(0, 0, 0, 0)
    return new Date(d);
}

bot.on("photo", msg => { console.log(msg) })
